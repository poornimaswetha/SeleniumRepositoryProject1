
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

	/*
	 * Complete the 'splitIntoTwo' function below.
	 *
	 * The function is expected to return an INTEGER. The function accepts
	 * INTEGER_ARRAY arr as parameter.
	 */

	

public class arraylistusinglistfn {

	public static void main(String[] args) throws IOException {
		BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

		int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

		List<Integer> arr = IntStream.range(0, arrCount).mapToObj(i -> {
			try {
				return bufferedReader.readLine().replaceAll("\\s+$", "");
			} catch (IOException ex) {
				throw new RuntimeException(ex);
			}
		}).map(String::trim).map(Integer::parseInt).collect(toList());

		int result = Result.splitIntoTwo(arr);

		bufferedWriter.write(String.valueOf(result));
		bufferedWriter.newLine();

		bufferedReader.close();
		bufferedWriter.close();
	}
}

public static int splitIntoTwo(List<Integer> arr) {
	
	int leftSum = 0;	
	int splitPoint;
	for (int i = 0; i < arr.size(); i++) {
		// add current element to left Sum
		leftSum += arr.get(i);

		// find sum of rest array
		// elements (rightSum)
		int rightSum = 0;
		for (int j = i + 1; j < arr.size(); j++)
			rightSum += arr.get(j);

		// split point index
		if (leftSum > rightSum)
			splitPoint= i;
	}

    for (int i = 0; i <  arr.size(); i++)
    {
        if(splitPoint == i)
            System.out.println();
              
        System.out.print(arr.get(i) + " ");
    }


